// Generated by CoffeeScript 1.12.7
(function() {
  var __CREATE, __FETCH, __REMOVE, __UPDATE, __categoryPath, __itemListPath, __itemPath, __tagPath, dispatchQuery, generalQuery;

  this.__serverKey = 'cnServer';

  this.__portKey = 'cnPort';

  __itemPath = 'item';

  __itemListPath = __itemPath + "/list";

  __tagPath = 'tag';

  __categoryPath = 'category';

  __CREATE = 'POST';

  __FETCH = 'GET';

  __UPDATE = 'PUT';

  __REMOVE = 'DELETE';

  this.Status = {
    COMPLETE: 0x0,
    ERROR: 0x1,
    EXCEPTION: 0x2
  };

  this.create = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __itemPath, __CREATE, success_callback);
  };

  this.update = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __itemPath, __UPDATE, success_callback);
  };

  this.remove = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __itemPath, __REMOVE, success_callback);
  };

  this.get_item = function(payload, success_callback) {
    return dispatchQuery(payload, __itemPath, __FETCH, success_callback);
  };

  this.create_category = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __categoryPath, __CREATE, success_callback);
  };

  this.get_category = function(success_callback) {
    return dispatchQuery(void 0, __categoryPath, __FETCH, success_callback);
  };

  this.update_category = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __categoryPath, __UPDATE, success_callback);
  };

  this.remove_category = function(payload, success_callback) {
    return dispatchQuery(JSON.stringify(payload), __categoryPath, __REMOVE, success_callback);
  };

  this.get_tags = function(success_callback) {
    return dispatchQuery(void 0, __tagPath, __FETCH, success_callback);
  };

  this.list_items = function(payload, success_callback) {
    return dispatchQuery(payload, __itemListPath, __FETCH, success_callback);
  };

  dispatchQuery = function(payload, urlEndPoint, query_method, success_callback) {
    return browser.storage.local.get([__serverKey, __portKey]).then(function(result) {
      var port, server;
      if (result[__serverKey] !== void 0 && result[__portKey] !== void 0) {
        server = result[__serverKey];
        port = result[__portKey];
        return generalQuery(payload, urlEndPoint, query_method, success_callback, server, port);
      } else {
        throw "server or port not configured";
      }
    });
  };

  generalQuery = function(payload, urlEndPoint, query_method, success_callback, server, port) {
    return $.ajax({
      type: query_method,
      url: "http://" + server + ":" + port + "/" + urlEndPoint,
      data: payload,
      contentType: 'application/json',
      dataType: 'json',
      crossDomain: true,
      crossOrigin: true,
      success: success_callback
    });
  };

}).call(this);
