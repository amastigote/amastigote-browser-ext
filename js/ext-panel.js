// Generated by CoffeeScript 1.12.7
(function() {
  var add_btn, browse_btn, collect_item, delete_btn, img_settings, mask, settings_btn, tag_input, title_input, update_btn, update_icon, url_input;

  add_btn = $('#btn_add');

  update_btn = $('#btn_update');

  delete_btn = $('#btn_delete');

  browse_btn = $('#img_page');

  settings_btn = $('#btn_settings');

  title_input = $('#input_title');

  url_input = $('#input_url');

  tag_input = $('#input_tag');

  img_settings = $('#img_settings');

  mask = $('#mask');

  mask.css('height', $(document).height());

  mask.css('width', $(document).width());

  browser.storage.local.get('tags').then(function(result) {
    if (result['tags'] == null) {
      result = {
        tags: []
      };
    }
    return new Awesomplete(document.getElementById('input_tag'), {
      list: result['tags'].map(function(e) {
        return unescape(e);
      }),
      filter: function(text, input) {
        return Awesomplete.FILTER_CONTAINS(text, input.match(/[^,]*$/)[0]);
      },
      item: function(text, input) {
        return Awesomplete.ITEM(text, input.match(/[^,]*$/)[0]);
      },
      replace: function(text) {
        var before;
        before = this.input.value.match(/^.+,\s*|/)[0];
        return this.input.value = before + text + ', ';
      },
      minChars: 1,
      maxItems: 2,
      autoFirst: true
    });
  });

  browse_btn.click(function() {
    return browser.storage.local.get(['cnServer', 'cnPort']).then(function(result) {
      browser.tabs.create({
        'url': '/html/page.html?server=' + result['cnServer'] + '&port=' + result['cnPort']
      });
      return window.close();
    });
  });

  add_btn.click(function() {
    mask.fadeIn();
    add_btn.prop('disabled', true);
    return create(collect_item(), function() {
      mask.fadeOut();
      update_btn.prop('disabled', false);
      delete_btn.prop('disabled', false);
      return browser.tabs.query({
        currentWindow: true,
        active: true
      }).then(function(tabs) {
        if (tabs[0]) {
          return update_icon(true, tabs[0].id);
        }
      });
    });
  });

  update_btn.click(function() {
    mask.fadeIn();
    update_btn.prop('disabled', true);
    return update(collect_item(), function() {
      mask.fadeOut();
      return update_btn.prop('disabled', false);
    });
  });

  delete_btn.click(function() {
    mask.fadeIn();
    delete_btn.prop('disabled', true);
    return remove(collect_item(), function() {
      mask.fadeOut();
      add_btn.prop('disabled', false);
      update_btn.prop('disabled', true);
      return browser.tabs.query({
        currentWindow: true,
        active: true
      }).then(function(tabs) {
        if (tabs[0]) {
          return update_icon(false, tabs[0].id);
        }
      });
    });
  });

  img_settings.click(function() {
    browser.runtime.openOptionsPage();
    return window.close();
  });

  settings_btn.click(function() {
    browser.runtime.openOptionsPage();
    return window.close();
  });

  update_icon = function(hasColor, tabId) {
    return browser.browserAction.setIcon({
      path: hasColor ? {
        48: '../pic/cn_1.png'
      } : {
        48: '../pic/cn_0.png'
      },
      tabId: tabId
    });
  };

  collect_item = function() {
    return {
      title: escape(title_input.val()),
      url: url_input.val(),
      tags: tag_input.val().replace(/[， 、]/g, ',').split(',').map(function(e) {
        return e.trim();
      }).filter(function(e) {
        return e !== '';
      }).map(function(e) {
        return escape(e);
      })
    };
  };

  browser.tabs.query({
    currentWindow: true,
    active: true
  }).then(function(tabs) {
    var url;
    if (tabs[0]) {
      url = tabs[0].url;
      title_input.val(removeSuffix(url, tabs[0].title));
      url_input.val(url);
      return get_item({
        url: url_input.val()
      }, function(result) {
        if (result['stat'] === Status.COMPLETE) {
          mask.fadeOut();
          add_btn.prop('disabled', true);
          title_input.val(unescape(result['obj']['title']));
          return tag_input.val(result['obj']['tags'].map(function(e) {
            return unescape(e.name);
          }).join(', '));
        } else if (result['stat'] === Status.ERROR) {
          mask.fadeOut();
          update_btn.prop('disabled', true);
          return delete_btn.prop('disabled', true);
        }
      });
    }
  });

}).call(this);
