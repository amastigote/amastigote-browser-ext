// Generated by CoffeeScript 1.12.7
(function() {
  var add_btn, browse_btn, collectItem, delete_btn, escapeChars, img_settings, mask, settings_btn, tag_input, title_input, updateIcon, updatePanel, update_btn, url_input;

  add_btn = $('#btn_add');

  update_btn = $('#btn_update');

  delete_btn = $('#btn_delete');

  browse_btn = $('#img_page');

  settings_btn = $('#btn_settings');

  title_input = $('#input_title');

  url_input = $('#input_url');

  tag_input = $('#input_tag');

  img_settings = $('#img_settings');

  mask = $('#mask');

  mask.css('height', $(document).height());

  mask.css('width', $(document).width());

  browser.storage.local.get('tags').then(function(result) {
    var extractLast, split;
    if (result['tags'] === void 0) {
      result = {
        tags: []
      };
    }
    split = function(val) {
      return val.split(/,\s*/);
    };
    extractLast = function(term) {
      return split(term).pop();
    };
    return $('#input_tag').autocomplete({
      minLength: 1,
      source: function(request, response) {
        return response($.ui.autocomplete.filter(result['tags'].map(function(e) {
          return escapeChars(unescape(e.trim()));
        }), extractLast(request.term)));
      }
    }, {
      focus: function() {
        return false;
      },
      select: function(event, ui) {
        var terms;
        terms = split(this.value);
        terms.pop();
        terms.push(ui.item.value);
        terms.push("");
        this.value = terms.join(", ");
        return false;
      }
    });
  });

  browse_btn.click(function() {
    return browser.storage.local.get(['cnServer', 'cnPort']).then(function(result) {
      browser.tabs.create({
        'url': '/html/page.html?server=' + result['cnServer'] + '&port=' + result['cnPort']
      });
      return window.close();
    });
  });

  add_btn.click(function() {
    mask.fadeIn();
    add_btn.prop('disabled', true);
    return create(collectItem(), function() {
      mask.fadeOut();
      update_btn.prop('disabled', false);
      delete_btn.prop('disabled', false);
      return browser.tabs.query({
        currentWindow: true,
        active: true
      }).then(function(tabs) {
        if (tabs[0]) {
          return updateIcon(true, tabs[0].id);
        }
      });
    });
  });

  update_btn.click(function() {
    mask.fadeIn();
    update_btn.prop('disabled', true);
    return update(collectItem(), function(result) {
      updatePanel(result);
      mask.fadeOut();
      return update_btn.prop('disabled', false);
    });
  });

  delete_btn.click(function() {
    mask.fadeIn();
    delete_btn.prop('disabled', true);
    return remove(collectItem(), function() {
      mask.fadeOut();
      add_btn.prop('disabled', false);
      update_btn.prop('disabled', true);
      return browser.tabs.query({
        currentWindow: true,
        active: true
      }).then(function(tabs) {
        if (tabs[0]) {
          return updateIcon(false, tabs[0].id);
        }
      });
    });
  });

  img_settings.click(function() {
    browser.runtime.openOptionsPage();
    return window.close();
  });

  settings_btn.click(function() {
    browser.runtime.openOptionsPage();
    return window.close();
  });

  updateIcon = function(hasColor, tabId) {
    return browser.browserAction.setIcon({
      path: hasColor ? {
        48: '../pic/cn_1.png'
      } : {
        48: '../pic/cn_0.png'
      },
      tabId: tabId
    });
  };

  collectItem = function() {
    return {
      title: escape(title_input.val()),
      url: url_input.val(),
      tags: tag_input.val().replace(/[， 、]/g, ',').split(',').map(function(e) {
        return e.trim();
      }).filter(function(e) {
        return e !== '';
      }).map(function(e) {
        return escape(e);
      })
    };
  };

  escapeChars = function(string) {
    return string.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };

  browser.tabs.query({
    currentWindow: true,
    active: true
  }).then(function(tabs) {
    var url;
    if (tabs[0]) {
      url = tabs[0].url;
      title_input.val(removeSuffix(url, tabs[0].title));
      url_input.val(url);
      return get_item({
        url: url_input.val()
      }, function(result) {
        if (result['stat'] === Status.COMPLETE) {
          mask.fadeOut();
          add_btn.prop('disabled', true);
          return updatePanel(result);
        } else if (result['stat'] === Status.ERROR) {
          mask.fadeOut();
          update_btn.prop('disabled', true);
          return delete_btn.prop('disabled', true);
        }
      });
    }
  });

  updatePanel = function(result) {
    title_input.val(escapeChars(unescape(result['obj']['title'])));
    return tag_input.val(result['obj']['tags'].map(function(e) {
      return escapeChars(unescape(e.name));
    }).join(', '));
  };

}).call(this);
